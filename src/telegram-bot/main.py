import os
import json
from typing import Dict, List
import uuid
import logging
from io import BytesIO
from urllib.parse import urlparse

import qrcode
import requests

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters
)

from config import load_app_config, ServerConnectionConfig

from x3uiClient import X3UIClient

# --- Configure logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- States for ConversationHandler ---
SECRET, ADD_USERNAME, ADD_CONTACT = range(3)

# --- Global storage ---
AUTH_DB = 'data/auth_users.json'
USERS_DB = 'data/users.json'

# --- Load servers & sessions on startup ---
CONFIG_PATH = os.getenv('CONFIG_PATH', 'data/config.yaml')


def get_servers():
    config = load_app_config(CONFIG_PATH)
    return config.servers


def get_sessions() -> Dict[str, X3UIClient]:
    servers = get_servers()

    sessions: Dict[str, X3UIClient] = {}
    for srv in servers:
        try:
            session = X3UIClient(srv)
            sessions[srv.name] = session
            logger.info(f"Logged in to {srv.name}")
        except Exception as e:
            logger.error(f"Failed to login to {srv.name}: {e}")

    return sessions


# --- Helpers ---

def load_authenticated_users():
    if not os.path.exists(AUTH_DB):
        return {"secret": "", "users": []}
    with open(AUTH_DB, 'r') as f:
        return json.load(f)


def save_authenticated_users(data):
    with open(AUTH_DB, 'w') as f:
        json.dump(data, f, indent=2)


def save_users(db_path, users):
    with open(db_path, 'w') as f:
        json.dump(users, f, indent=2)


def load_users(db_path):
    if not os.path.exists(db_path):
        return []
    with open(db_path, 'r') as f:
        return json.load(f)


def build_vless_url(session: X3UIClient, client_id, sub_id):
    """
    Fetch inbound details and construct a VLESS URL.
    –î–ª—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ URL:
      ‚Ä¢ –ë–µ—Ä—ë–º host –∏–∑ base_url –±–µ–∑ –ø–æ—Ä—Ç–∞.
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ inbound (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 443).
      ‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'sid' –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º custom tag –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    server_config = session.config
    inbound = server_config.inbound_id

    # Get inbound details from the server
    obj = session.get_inbound(inbound)

    # Assume the inbound object —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'port' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 443)
    port = obj.get('port', 443)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º hostname –∏–∑ base_url
    parsed = urlparse(server_config.base_url)
    host = parsed.hostname

    # –ù–∞—Ö–æ–¥–∏–º email –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ client_id
    clients = json.loads(obj["settings"])["clients"]
    for client in clients:
        if client['id'] == client_id:
            break
    email = client.get('email', client_id)

    # –ü–∞—Ä—Å–∏–º streamSettings
    ss = json.loads(obj['streamSettings'])
    rs = ss.get('realitySettings', {})
    settings = rs.get('settings', {})

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL
    params = {
        'type': ss.get('network', 'tcp'),
        'security': ss.get('security', 'none'),
        'pbk': settings.get('publicKey', ''),
        'fp': settings.get('fingerprint', ''),
        'sni': rs.get('serverNames', [''])[0],
        'sid': '',  # deliberately empty
        'spx': obj.get('spiderX', '/')
    }
    qs = '&'.join(
        f"{k}={requests.utils.quote(str(v), safe='')}"
        for k, v in params.items()
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º remark –∏–ª–∏ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–≥–∞
    tag = f"{obj.get('remark', server_config.name)}-{email}"
    url = f"vless://{client_id}@{host}:{port}?{qs}#{tag}"
    return url


def generate_qr(url):
    img = qrcode.make(url)
    bio = BytesIO()
    bio.name = 'qr.png'
    img.save(bio)
    bio.seek(0)
    return bio


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_data = load_authenticated_users()
authenticated_users = set(auth_data.get("users", []))
stored_secret = auth_data.get("secret", "")


# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboardMarkup), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –ø–æ–º–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
MAIN_MENU = ReplyKeyboardMarkup([
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
    ["üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"]
], resize_keyboard=True, one_time_keyboard=False)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞. –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –µ–≥–æ.
    """
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
    )
    return SECRET


async def secret_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç. –ï—Å–ª–∏ –≤–µ—Ä–Ω–æ, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    global stored_secret, authenticated_users

    config = load_app_config(CONFIG_PATH)

    # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if config.bot.secret != stored_secret:
        authenticated_users.clear()
        stored_secret = config.bot.secret

    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text == config.bot.secret:
        authenticated_users.add(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        save_authenticated_users({
            "secret": stored_secret,
            "users": list(authenticated_users)
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return SECRET


async def add_user_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –®–∞–≥ 1: –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º username.
    """
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        return ConversationHandler.END

    # –£–±–∏—Ä–∞–µ–º ReplyKeyboard (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è (username) –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup([], resize_keyboard=True)
    )
    return ADD_USERNAME


async def add_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –®–∞–≥ 2: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π username, –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
    """
    context.user_data['new_user'] = {
        'username': update.message.text.strip()
    }
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç),
    # –∞ —Ç–∞–∫–∂–µ –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥.
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID/username, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´@username¬ª –∏–ª–∏ ¬´id:7370682957¬ª).\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´/cancel¬ª.",
        reply_markup=ReplyKeyboardMarkup([], resize_keyboard=True),
        parse_mode="Markdown"
    )
    return ADD_CONTACT


async def add_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –®–∞–≥ 3: –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (–∏–ª–∏ –≤–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç), —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞,
    —Ä–∞—Å—Å—ã–ª–∞–µ–º QR –∏ URL –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º.

    –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã (—Ç–µ–∫—Å—Ç ¬´–û—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´/cancel¬ª).
    """
    text = update.message.text.strip() if update.message.text else ""

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤—ë–ª ¬´–û—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´/cancel¬ª ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text.lower() in ('–æ—Ç–º–µ–Ω–∞', '/cancel'):
        await update.message.reply_text(
            "‚ùóÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å contact ‚Äî –∑–Ω–∞—á–∏—Ç –∞–¥–º–∏–Ω –ø–µ—Ä–µ—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if update.message.contact:
        user_id_peer = update.message.contact.user_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "id:<peer_id>"
        contact_str = f"id:{user_id_peer}"
    else:
        # –ò–Ω–∞—á–µ –±–µ—Ä—ë–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–º–∏–Ω –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é
        # –ó–¥–µ—Å—å –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ–Ω —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "@username" –∏–ª–∏ "id:7370682957"
        contact_str = text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
    nu = context.user_data['new_user']
    nu['telegram_contact'] = contact_str

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client_id = str(uuid.uuid4())
    sub_id = str(uuid.uuid4())
    client = {
        'id': client_id,
        'email': f"{nu['username']}|{nu['telegram_contact']}",
        'enable': True,
        'expiryTime': 0,
        'flow': '',
        'limitIp': 0,
        'totalGB': 0,
        'tgId': '',
        'subId': sub_id,
        'reset': 0
    }

    results = []
    sessions = get_sessions()
    for server_name, session in sessions.items():
        try:
            inbound_id = session.config.inbound_id
            session.add_client_to_inbound(inbound_id, client)
            results.append((server_name, True))
        except Exception as e:
            logger.error(f"Error adding client on {server_name}: {e}")
            results.append((server_name, False))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥—ã –∏ URL
    for srv, ok in results:
        session = sessions[srv]
        if not ok:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä {srv}")
            continue
        url = build_vless_url(session, client_id, sub_id)
        qr = generate_qr(url)
        await update.message.reply_photo(qr, caption=f"–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {srv}:")
        await update.message.reply_text(
            f"```plain\n{url}```",
            parse_mode="Markdown"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ USERS_DB
    users = load_users(USERS_DB)
    servers = get_servers()
    nu['clients'] = {
        srv.name: {'id': client_id, 'subId': sub_id}
        for srv in servers
    }
    # –ó–¥–µ—Å—å nu['telegram_contact'] —É–∂–µ —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫—É "id:<peer_id>" –∏–ª–∏ "@username"
    nu['telegram_id'] = contact_str
    users.append(nu)
    save_users(USERS_DB, users)

    # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU
    )
    return ConversationHandler.END


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ ¬´üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π¬ª: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    —Å –∫–∞–∂–¥—ã–º username, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.
    """
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        return

    users = load_users(USERS_DB)
    if not users:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", reply_markup=MAIN_MENU)
        return

    buttons = [
        [InlineKeyboardButton(u['username'], callback_data=u['username'])]
        for u in users
    ]
    kb = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=kb
    )


async def user_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ (inline-–∫–Ω–æ–ø–∫–∞).
    –°–Ω–æ–≤–∞ —Ä–∞—Å—Å—ã–ª–∞–µ–º QR –∏ URL –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º.
    """
    query = update.callback_query
    await query.answer()
    username = query.data

    users = load_users(USERS_DB)
    user = next((u for u in users if u['username'] == username), None)
    if not user:
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=MAIN_MENU)
        return

    sessions = get_sessions()

    for server_name, session in sessions.items():
        srv_cfg = session.config
        info = user['clients'].get(srv_cfg.name)
        if not info:
            continue
        client_id = info['id']
        sub_id = info['subId']
        url = build_vless_url(session, client_id, sub_id)
        qr = generate_qr(url)
        await query.message.reply_photo(qr, caption=f"–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {srv_cfg.name}:")
        await query.message.reply_text(
            f"```plain\n{url}```",
            parse_mode="Markdown"
        )

    await query.edit_message_text(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è `{username}` –±—ã–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=MAIN_MENU
    )


async def sync_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ USERS_DB.
    –õ–æ–≥–∏–∫–∞:
    1. –°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.
    2. –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ —Å–µ—Ä–≤–µ—Ä–∞, –≥–¥–µ –∏—Ö –Ω–µ—Ç.
    3. –û–±–Ω–æ–≤–∏—Ç—å USERS_DB (–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö, –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö).
    4. –£–¥–∞–ª–∏—Ç—å –∏–∑ USERS_DB —Ç–µ—Ö, –∫—Ç–æ –∏—Å—á–µ–∑ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.
    """
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        return

    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤‚Ä¶")

    sessions: Dict[str, X3UIClient] = get_sessions()
    clients_per_server: Dict[str, List[Dict]] = {}

    # 1. –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    for srv_name, session in sessions.items():
        try:
            inbound_id = session.config.inbound_id
            inbound_obj = session.get_inbound(inbound_id)
            settings = json.loads(inbound_obj["settings"])
            clients_list = settings.get("clients", [])
            clients_per_server[srv_name] = clients_list
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbound —Å —Å–µ—Ä–≤–µ—Ä–∞ {srv_name}: {e}")
            clients_per_server[srv_name] = []

    # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ email
    email_to_servers: Dict[str, set] = {}
    email_to_example_client: Dict[str, Dict] = {}
    for srv_name, clients in clients_per_server.items():
        for client in clients:
            email = client.get("email")
            if not email:
                continue
            email_to_servers.setdefault(email, set()).add(srv_name)
            if email not in email_to_example_client:
                email_to_example_client[email] = client

    all_emails = set(email_to_servers.keys())

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ —Å–µ—Ä–≤–µ—Ä–∞, –≥–¥–µ –∏—Ö –Ω–µ—Ç
    for email in all_emails:
        present_on = email_to_servers[email]
        missing_on = set(sessions.keys()) - present_on
        if not missing_on:
            continue

        template = email_to_example_client[email]
        for missing_srv in missing_on:
            session = sessions[missing_srv]
            inbound_id = session.config.inbound_id

            # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π id –∏ subId
            new_client = template.copy()
            new_client["email"] = email

            try:
                session.add_client_to_inbound(inbound_id, new_client)
                await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç `{email}` –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä `{missing_srv}`.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {email} –Ω–∞ {missing_srv}: {e}")
                await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ `{email}` –Ω–∞ `{missing_srv}`.")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º USERS_DB
    users_db_path = USERS_DB
    existing_users = load_users(users_db_path)
    updated_users: List[Dict] = []
    existing_emails_in_db = set()

    # 3.1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º email‚Äô—ã –∏–∑ USERS_DB
    for user in existing_users:
        username = user.get("username")
        contact = user.get("telegram_contact", user.get("telegram_id", ""))
        if contact:
            reconstructed_email = f"{username}|{contact}"
        else:
            reconstructed_email = username
        existing_emails_in_db.add(reconstructed_email)

    # 3.2. –ï—Å–ª–∏ email –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –Ω–æ –Ω–µ—Ç –≤ USERS_DB ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for email in all_emails:
        if email not in existing_emails_in_db:
            if "|" in email:
                username_part, contact_part = email.split("|", 1)
            else:
                username_part, contact_part = email, ""
            clients_map: Dict[str, Dict] = {}
            for srv_name, clients in clients_per_server.items():
                for client in clients:
                    if client.get("email") == email:
                        clients_map[srv_name] = {
                            "id": client.get("id"),
                            "subId": client.get("subId")
                        }
            new_user_entry = {
                "username": username_part,
                "telegram_contact": contact_part,
                "telegram_id": contact_part,
                "clients": clients_map
            }
            updated_users.append(new_user_entry)
            await update.message.reply_text(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username_part}` (email `{email}`) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")

    # 3.3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –æ–±–Ω–æ–≤–ª—è–µ–º clients –∏–ª–∏ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    for user in existing_users:
        username = user.get("username")
        contact = user.get("telegram_contact", user.get("telegram_id", ""))
        if contact:
            user_email = f"{username}|{contact}"
        else:
            user_email = username

        if user_email in all_emails:
            # –û–±–Ω–æ–≤–ª—è–µ–º clients_map
            clients_map: Dict[str, Dict] = {}
            for srv_name, clients in clients_per_server.items():
                for client in clients:
                    if client.get("email") == user_email:
                        clients_map[srv_name] = {
                            "id": client.get("id"),
                            "subId": client.get("subId")
                        }
            user["clients"] = clients_map
            updated_users.append(user)
        else:
            # –ö–ª–∏–µ–Ω—Ç –∏—Å—á–µ–∑ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ ‚Üí —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            await update.message.reply_text(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π USERS_DB
    save_users(users_db_path, updated_users)

    await update.message.reply_text(
        "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        reply_markup=MAIN_MENU
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é¬ª: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª
async def menu_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await add_user_cmd(update, context)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é¬ª: ¬´üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π¬ª
async def menu_list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await list_users(update, context)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é¬ª: ¬´üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤¬ª
async def menu_sync_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await sync_clients(update, context)


def main():
    cfg = load_app_config(CONFIG_PATH)
    app = ApplicationBuilder().token(cfg.bot.token).build()

    # ConversationHandler –¥–ª—è –≤–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SECRET: [MessageHandler(filters.TEXT & ~filters.COMMAND, secret_handler)]
        },
        fallbacks=[]
    )
    app.add_handler(secret_conv)

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_conv = ConversationHandler(
        entry_points=[
            # –∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã, –º–æ–∂–Ω–æ –ø–æ —Å—Ç–∞—Ä–æ–º—É /add_user
            CommandHandler('add_user', add_user_cmd),
            MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$'), menu_add_user)
        ],
        states={
            ADD_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_username)],
            # –í ADD_CONTACT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ contact, –∏ —Ç–µ–∫—Å—Ç (–≤ —Ç–æ–º —á–∏—Å–ª–µ ¬´–û—Ç–º–µ–Ω–∞¬ª)
            ADD_CONTACT: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), add_contact)],
        },
        fallbacks=[]
    )
    app.add_handler(add_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    # –ö–æ–º–∞–Ω–¥–∞ /list_users –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π¬ª
    app.add_handler(CommandHandler('list_users', list_users))
    app.add_handler(MessageHandler(filters.Regex(r'^üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$'), menu_list_users))
    app.add_handler(CallbackQueryHandler(user_selected))

    # –ö–æ–º–∞–Ω–¥–∞ /sync_clients –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤¬ª
    app.add_handler(CommandHandler('sync_clients', sync_clients))
    app.add_handler(MessageHandler(filters.Regex(r'^üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤$'), menu_sync_clients))

    logger.info("Bot is polling...")
    app.run_polling()


if __name__ == '__main__':
    main()
